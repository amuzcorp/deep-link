<?php

namespace AmuzPackages\DeepLink\Nova\Resources;

use Illuminate\Http\Request;
use Laravel\Nova\Fields\BelongsTo;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Http\Requests\NovaRequest;
use Laravel\Nova\Fields\ID;
use App\Nova\Resource;
use Laravel\Nova\Panel;

class LinkContextHistory extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static string $model = \AmuzPackages\DeepLink\Models\LinkContextHistory::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'id';

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id',
    ];

    /**
     * Group of resources - It's autogenerated as module name
     * @var string
     */
    public static $group = "DEEP-LINK";

    public function fields(NovaRequest $request): array
    {
        return [
            ID::make()->sortable(),
            BelongsTo::make('Context','linkContext',LinkContext::class),

            Text::make('ip_address'),
            Text::make('referrer')->onlyOnDetail(),
            Text::make('user_agent')->onlyOnDetail(),

            Panel::make('Device',[
                Text::make('device_family'),
                Text::make('device_model'),
                Text::make('device_type'),
            ]),

            Panel::make('Platform',[
                Text::make('platform_name'),
                Text::make('platform_version'),
                Text::make('platform_family'),
            ]),

            Panel::make('Browser',[
                Text::make('browser_family'),
                Text::make('browser_engine')->onlyOnDetail(),
                Text::make('browser_name')->onlyOnDetail(),
                Text::make('browser_version')->onlyOnDetail(),
            ]),
        ];
    }

    public function cards(NovaRequest $request): array
    {
        return [];
    }

    public function filters(NovaRequest $request): array
    {
        return [];
    }

    public function lenses(NovaRequest $request): array
    {
        return [];
    }

    public function actions(NovaRequest $request): array
    {
        return [];
    }
}
